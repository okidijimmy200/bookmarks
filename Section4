Lecture 1:
Using a custom user model::
--Django also offers a way to substitute the whole user model with
your own custom model. Your user class should inherit from
Django's AbstractUser class, which provides the full implementation of
the default user as an abstract model. You can read more about this
method

--Using a custom user model will give you more flexibility, but it
might also result in more difficult integration with pluggable
applications that interact with Django's auth user model.

Lecture 2:
Using the message framework
--Django has a built-in messages framework that allows you
to display one-time notifications to your users.

You can create new messages using the add_message() method or any of
the following shortcut methods:
***success(): Success messages to be displayed after an action
was successful
***info(): Informational messages
***warning(): Something has not yet failed but may fail imminently
***error(): An action was not successful, or something failed
***debug(): Debug messages that will be removed or ignored in a
production environment

---The messages framework includes the context
processor django.contrib.messages.context_processors.messages that adds a
messages variable to the request context

Lecture 3:
Building a custom authentication backend
-Django allows you to authenticate against different sources. The
AUTHENTICATION_BACKENDS setting includes the list of authentication
backends for your project

--The default ModelBackend authenticates users against the database
using the user model of django.contrib.auth. This will suit most of your
projects. However, you can create custom backends to authenticate
your user against other sources, such as an LDAP directory or any
other system.

--authentication class provides the following:
**authenticate(): It takes the request object and user credentials as
parameters. It has to return a user object that matches those
**credentials if the credentials are valid, or None otherwise. The
request parameter is an HttpRequest object, or None if it's not
provided to authenticate().
**get_user(): Takes a user ID parameter and has to return a user
object.

**We will create an
authentication backend to let users authenticate in our site using
their email address instead of their username.


the authentication.py file operates as follows
$$authenticate(): We try to retrieve a user with the given email
address and check the password using the built-in
check_password() method of the user model. This method
handles the password hashing to compare the given
password against the password stored in the database.
$$get_user(): We get a user through the ID set in the user_id
parameter. Django uses the backend that authenticated the
user to retrieve the User object for the duration of the user
session.

--edit the settings.py file

--open http://127.0.0.1:8000/account/login/ in your browser.

--Remember that
Django will try to authenticate the user against each of the
backends, so now we should be able to log in seamlessly using your
username or email account. User credentials will be checked using
the ModelBackend authentication backend, and if no user is returned,
credentials will be checked using our custom EmailAuthBackend backend

Lecture 4:
Adding social authentication to your site
--Python Social Auth is a Python module that simplifies the process of adding social
authentication to our website. Using this module, you can let your
users log in to your website using their account of other services

run the social_auth
****pip install social-auth-app-django==2.1.0*****

add it to installed applications
then 
python manage.py migrate
***Python-social-auth includes backends for multiple services. You can
see a list of all backends

***Several social services will not allow the redirecting of users to
127.0.0.1 or localhost after a successful authentication.
***This will tell your computer to point the mysite.com hostname to your
own machine. If you are using Windows, your hosts file is located at
C:\Windows\System32\Drivers\etc\hosts.

--Edit the settings.py file of your project and edit the ALLOWED_HOSTS setting
as follows:
ALLOWED_HOSTS = ['mysite.com', 'localhost', '127.0.0.1']

Lecture 5:
Running the development server through
HTTPS:
--The Transport Layer Security (TLS) protocol is the standard for serving
websites through a secure connection
--In order to test the social authentication functionality serving your site through
HTTPS, you are going to use the RunServerPlus extension of the package Django
Extensions.

*******pip install django-extensions==2.2.5********

install Werkzeug, which contains a debugger layer required by
the RunServerPlus extension
****pip install werkzeug==0.16.0***

--pyOpenSSL, which is required to use
the SSL/TLS functionality of RunServerPlus:
****pip install pyOpenSSL==19.0.0***

--Use the management command runserver_plus provided by Django Extensions
to run the development server, as follows:

***************************python manage.py runserver_plus --cert-file cert.crt*********************
open https://mysite.com:8000/account/login/ to chekout

Authentication using Facebook::
--In order to let your users log in with their Facebook account to your
site, add the following line to the AUTHENTICATION_BACKENDS setting in the
settings.py file of your project
'social_core.backends.facebook.FacebookOAuth2',
--Copy the App ID and App Secret keys and add them to the settings.py
file of your project, as follows

--Open the registration/login.html template of your account application and
append the following code at the bottom of the content block

pg 259---error on fb login

--to authenticate with facebook, you will need a fb developer account
***Open https://developers.facebook.com/apps/ in your browser.
You will see the following header in the site:

**Click on the Add a New App button. You will see the following form
to create a new app ID:

Lecture 6:
Authentication using Twitter::
--add social_core.backends.twitter.TwitterOAuth', to authentication_backends

NB: twitter verification underway

Lecture 7:
Authentication using Google::
--Using authentication in Google
--we create an API key in google developer console

https://console.developers.google.com/apis/credentials

--create project 
--click credentials and click the create credentials and OAuth client ID

Lecture 7:
Posting content from other websites
--we will allow users bookmark images from external websites
-the user will provide the url of image, title and description

--our app will download the image and create a new image object in the database
--build a form to submit new image


