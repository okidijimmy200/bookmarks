Lecture 1:
Using signals for denormalizing counts::
--There are some cases when you may want to denormalize your data.
Denormalization is making data redundant in such a way that it optimizes read
performance.

--You have to be careful about denormalization and only start using it when you really need
it.
--its hard to keep  denormalized data updated

Working with signals::
--Django comes with a signal dispatcher that allows receiver functions to get notified
when certain actions occur. Signals are very useful when you need your code to do
something every time something else happens. Signals allow you to decouple logic:
--you can build a signal receiver function that gets executed every time
a User object is saved

--• pre_save and post_save are sent before or after calling the save() method
of a model
• pre_delete and post_delete are sent before or after calling the delete()
method of a model or QuerySet
• m2m_changed is sent when a ManyToManyField on a model is changed

--Let's say you want to retrieve images by popularity. You can use the Django
aggregation functions to retrieve images ordered by the number of users who like
them

--ordering images by counting their total likes is more expensive in
terms of performance than ordering them by a field that stores total counts. You
can add a field to the Image model to denormalize the total number of likes to
boost performance in queries that involve this field

--NB:
Consider database
indexes, query optimization, and caching before starting to
denormalize your data.

***********python manage.py makemigrations images****

**********python manage.py migrate images********

--Django signals are synchronous and blocking. Don't confuse signals
with asynchronous tasks. However, you can combine both to
launch asynchronous tasks when your code gets notified by a
signal.

Lecture 2::
Application configuration classes
--The application configuration class allows you to store metadata and the
configuration for the application, and it provides introspection for the application.
--in the apps.py file

--Open your browser to view an image detail page and click on the LIKE button.
Go back to the administration site, navigate to the edit image URL, such as
http://127.0.0.1:8000/admin/images/image/1/change/, and take a look
at the total_likes attribute

--Now, you can use the total_likes attribute to order images by popularity
or display the value anywhere, avoiding using complex queries to calculate it.

from django.db.models import Count
images_by_popularity = Image.objects.annotate(
likes=Count('users_like')).order_by('-likes')

The preceding query can now be written as follows:

images_by_popularity = Image.objects.order_by('-total_likes')

This results in a less expensive SQL query.

NB:
Use signals with caution since they make it difficult to know the
control flow. In many cases, you can avoid using signals if you
know which receivers need to be notified.

from images.models import Image
for image in Image.objects.all():
image.total_likes = image.users_like.count()
image.save()

--The likes count for each image is now up to date.


Lecture 3:
Using Redis for storing item views::
---Redis is an advanced key/value database that allows you to save different types of
data. It also has extremely fast I/O operations. Redis stores everything in memory,
but the data can be persisted by dumping the dataset to disk every once in a while,
or by adding each command to a log

--Redis supports strings, hashes, lists, sets, ordered sets, and even bitmaps or
HyperLogLogs.
---Redis offers
numerous advantages when dealing with rapidly changing data, volatile storage,
or when a quick cache is needed.

Installing Redis:

The Redis client allows you to execute Redis commands directly from the shell.
127.0.0.1:6379> SET name "Peter"
OK

--The preceding command creates a name key with the string value "Peter" in the
Redis database. The OK output indicates that the key has been saved successfully

retrieve the value

127.0.0.1:6379> GET name
"Peter"

--You can also check whether a key exists using the EXISTS command. This command
returns 1 if the given key exists, and 0 otherwise:

127.0.0.1:6379> EXISTS name
(integer) 1

--You can set the time for a key to expire using the EXPIRE command, which allows
you to set time-to-live in seconds. Another option is using the EXPIREAT command,
which expects a Unix timestamp. Key expiration is useful for using Redis as a cache
or to store volatile data:

127.0.0.1:6379> GET name
"Peter"
127.0.0.1:6379> EXPIRE name 2
(integer) 1
Wait for two seconds and try to get the same key again:
127.0.0.1:6379> GET name
(nil)


You can also delete any key using the DEL command, as follows:
127.0.0.1:6379> SET total 1
OK
127.0.0.1:6379> DEL total
(integer) 1
127.0.0.1:6379> GET total
(nil)

Lecture 4:
Using Redis with Python::
install redis on python
************pip install redis==3.4.1*************

--The redis-py package interacts with Redis, providing a Python interface
that follows the Redis command syntax.

>>> import redis
>>> r = redis.Redis(host='localhost', port=6379, db=0)

--The preceding code creates a connection with the Redis database. In Redis, databases
are identified by an integer index instead of a database name. By default, a client is
connected to the database 0.

Next, set a key using the Python shell:
>>> r.set('foo', 'bar')
True

Now you can retrieve the key using the get() command:
>>> r.get('foo')
b'bar'

--Let's integrate Redis into your project. Edit the settings.py file of the bookmarks
project and add the following settings to it:
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0

Lecture 5:
Storing item views in Redis
Let's find a way to store the total number of times an image has been viewed.
--If you use Redis instead, you just need to increment
a counter stored in memory, resulting in a much better performance and less
overhead.
--edit the views.py file

--The convention for naming Redis keys is to use a colon sign as
a separator for creating namespaced keys. By doing so, the key
names are especially verbose and related keys share part of the
same schema in their names.

Lecture 9:
Storing a ranking in Redis::
--Let's build something more complex with Redis. You will create a ranking of the
most viewed images in your platform.
--For building this ranking, you will use Redis
sorted sets. A sorted set is a non-repeating collection of strings in which every
member is associated with a score.Items are sorted by their score.

When to use Redis
• Counting: As you have seen, it is very easy to manage counters with Redis.
You can use incr() and incrby() for counting stuff.
• Storing latest items: You can add items to the start/end of a list using
lpush() and rpush(). Remove and return the first/last element using
lpop() / rpop(). You can trim the list's length using ltrim() to maintain
its length.
• Queues: In addition to push and pop commands, Redis offers the blocking
of queue commands.
• Caching: Using expire() and expireat() allows you to use Redis as
a cache. You can also find third-party Redis cache backends for Django.
• Pub/sub: Redis provides commands for subscribing/unsubscribing and
sending messages to channels.
• Rankings and leaderboards: Redis sorted sets with scores make it very easy
to create leaderboards.
• Real-time tracking: Redis's fast I/O makes it perfect for real-time scenarios