Tracking User Actions
This chapter will cover the following points:
• Building a follow system
• Creating many-to-many relationships with an intermediary model
• Creating an activity stream application
• Adding generic relations to models
• Optimizing QuerySets for related objects
• Using signals for denormalizing counts
• Storing item views in Redis

Lecture 1:
Building a follow system
---This means that your users will be able to
follow each other and track what other users share on the platform. The relationship
between users is a many-to-many relationship: a user can follow multiple users and
they, in turn, can be followed by multiple users.

Creating many-to-many relationships with an intermediary model:::
--- intermediary model is necessary when you want to store additional information for
the relationship, for example, the date when the relationship was created, or a field
that describes the nature of the relationship.

reasons for using intermediary level:::
• You are using the User model provided by Django and you want to avoid
altering it
• You want to store the time when the relationship was created

Using the ORM, you could create a relationship for a user, user1, following another
user, user2, like this:
user1 = User.objects.get(id=1)
user2 = User.objects.get(id=2)
Contact.objects.create(user_from=user1, user_to=user2)

--The related managers, rel_from_set and rel_to_set, will return a QuerySet for
the Contact model.

NB:
When you need additional fields in a many-to-many relationship,
create a custom model with a ForeignKey for each side of the
relationship. Add a ManyToManyField in one of the related
models and indicate to Django that your intermediary model
should be used by including it in the through parameter.

---When you use an intermediary model for many-to-many
relationships, some of the related manager's methods are disabled,
such as add(), create(), or remove(). You need to create or
delete instances of the intermediary model instead.

**********python manage.py makemigrations account*************

sync the db
********python manage.py migrate account********

Lecture 2:
Creating list and detail views for user profiles::
--The Django User model contains an is_active flag to
designate whether the user account is considered active.

--Another way to specify the URL for a model is by
adding the ABSOLUTE_URL_OVERRIDES setting to your project in the sameway as canonical_url

Open the Python shell with the python manage.py shell command and run the
following code to test it

>>> from django.contrib.auth.models import User
>>> user = User.objects.latest('id')
>>> str(user.get_absolute_url())
'/account/users/jimmy/'

--create templates for the views

NB:
if you have any difficulty generating thumbnails, you can add
THUMBNAIL_DEBUG = True to your settings.py file in order to obtain debug
information in the shell


--In the detail template, you display the user profile and use the {% thumbnail %}
template tag to display the profile image. You show the total number of followers
and a link to follow or unfollow the user.

--You perform an AJAX request to follow/
unfollow a particular user. You add data-id and data-action attributes to the <a>
HTML element, including the user ID and the initial action to perform when the link
element is clicked – follow or unfollow, which depends on the user requesting the
page being a follower of this other user or not, as the case may be. You display the
images bookmarked by the user, including the images/image/list_ajax.html
template.

Building an AJAX view to follow users::


Lecture 3:
Building a generic activity stream application
--An activity stream is a list of recent activities
performed by a user or a group of users eg facebooks newfeed

--You are going to build an activity stream application so that every user can see the
recent interactions of the users they follow. To do so, you will need a model to save
the actions performed by users on the website and a simple way to add actions to
the feed.

************python manage.py startapp actions**********

---With this basic model, you can only store actions, such as user X did something. You
need an extra ForeignKey field in order to save actions that involve a target object,
such as user X bookmarked image Y or user X is now following user Y. As you already
know, a normal ForeignKey can point to only one model. Instead, you will need
a way for the action's target object to be an instance of an existing model.
