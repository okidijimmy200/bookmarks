Tracking User Actions
This chapter will cover the following points:
• Building a follow system
• Creating many-to-many relationships with an intermediary model
• Creating an activity stream application
• Adding generic relations to models
• Optimizing QuerySets for related objects
• Using signals for denormalizing counts
• Storing item views in Redis

Lecture 1:
Building a follow system
---This means that your users will be able to
follow each other and track what other users share on the platform. The relationship
between users is a many-to-many relationship: a user can follow multiple users and
they, in turn, can be followed by multiple users.

Creating many-to-many relationships with an intermediary model:::
--- intermediary model is necessary when you want to store additional information for
the relationship, for example, the date when the relationship was created, or a field
that describes the nature of the relationship.

reasons for using intermediary level:::
• You are using the User model provided by Django and you want to avoid
altering it
• You want to store the time when the relationship was created

Using the ORM, you could create a relationship for a user, user1, following another
user, user2, like this:
user1 = User.objects.get(id=1)
user2 = User.objects.get(id=2)
Contact.objects.create(user_from=user1, user_to=user2)

--The related managers, rel_from_set and rel_to_set, will return a QuerySet for
the Contact model.

NB:
When you need additional fields in a many-to-many relationship,
create a custom model with a ForeignKey for each side of the
relationship. Add a ManyToManyField in one of the related
models and indicate to Django that your intermediary model
should be used by including it in the through parameter.

---When you use an intermediary model for many-to-many
relationships, some of the related manager's methods are disabled,
such as add(), create(), or remove(). You need to create or
delete instances of the intermediary model instead.

**********python manage.py makemigrations account*************

sync the db
********python manage.py migrate account********